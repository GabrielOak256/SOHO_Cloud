// I read that OpenWRT and OPNSense are both good. The latter comes with more packages installed by default, the former can make good use of wireless (being Linux not FreeBSD).
// If we are morphing all of a company's workstations into a mainframe running Kubernetes, the wireless cards can be repurposed into a mesh Wireless Access Point. 
// Given that, I'm not sure if the containers doing the firewall and routing need to be the same containers 
// handling said Access Point, giving the credentials to the LDAP container, and placing the user in the appropriate VLAN. Which would necessitate OpenWRT to do both. 
// This file will become an Ansible/Pulumi/Terraform/Vagrant playbook that can install and configure OpenWRT or OPNSense in a container. 
// It would need arguments for VLAN specification, VPN credential details, a file containing firewall rules, a website blacklist, IPS (Snort), ...
// Once routers can be spawned automatically, we can run several in parallel for speed and failure tolerance. 
// Although, dumping the hardware SOHO router would lead to a circular dependency between Kubernetes and our virtual routers. So can we involve it in the load-balancing? 
// I tried to find a locally hosted Network Access Control (device health check) solution, but couldn't. Also a Data Loss Prevention application/proxy. 
// Having that capability will still be useful even if the machines' base OS (supporting Podman) don't communicate with guest devices directly.
